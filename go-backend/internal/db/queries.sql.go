// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, task_time, task_finish_date, user_id) VALUES ($1, $2, $3, $4) RETURNING id, title, task_time, task_finish_date, user_id
`

type CreateTaskParams struct {
	Title          string
	TaskTime       time.Time
	TaskFinishDate time.Time
	UserID         int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.TaskTime,
		arg.TaskFinishDate,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TaskTime,
		&i.TaskFinishDate,
		&i.UserID,
	)
	return i, err
}

const createTaskTag = `-- name: CreateTaskTag :one
INSERT INTO task_tags (task_id, tag_id) VALUES ($1, $2) RETURNING task_id, tag_id
`

type CreateTaskTagParams struct {
	TaskID int32
	TagID  int32
}

func (q *Queries) CreateTaskTag(ctx context.Context, arg CreateTaskTagParams) (TaskTag, error) {
	row := q.db.QueryRowContext(ctx, createTaskTag, arg.TaskID, arg.TagID)
	var i TaskTag
	err := row.Scan(&i.TaskID, &i.TagID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (uid, name, email)
VALUES ($1, $2, $3)
RETURNING id, uid, name, email
`

type CreateUserParams struct {
	Uid   string
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Uid, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks WHERE id = $1 RETURNING id, title, task_time, task_finish_date, user_id
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TaskTime,
		&i.TaskFinishDate,
		&i.UserID,
	)
	return i, err
}

const getTagIdByName = `-- name: GetTagIdByName :one
SELECT id FROM tags WHERE name = $1
`

func (q *Queries) GetTagIdByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTagIdByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getTagNameByID = `-- name: GetTagNameByID :one
SELECT name FROM tags WHERE id = $1
`

func (q *Queries) GetTagNameByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getTagNameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getTags = `-- name: GetTags :many
SELECT id, name FROM tags
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, task_time, task_finish_date, user_id FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TaskTime,
		&i.TaskFinishDate,
		&i.UserID,
	)
	return i, err
}

const getTaskByUserIDAndTaskID = `-- name: GetTaskByUserIDAndTaskID :one
SELECT id, title, task_time, task_finish_date, user_id FROM tasks WHERE user_id = $1 AND id = $2
`

type GetTaskByUserIDAndTaskIDParams struct {
	UserID int32
	ID     int32
}

func (q *Queries) GetTaskByUserIDAndTaskID(ctx context.Context, arg GetTaskByUserIDAndTaskIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByUserIDAndTaskID, arg.UserID, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TaskTime,
		&i.TaskFinishDate,
		&i.UserID,
	)
	return i, err
}

const getTaskTags = `-- name: GetTaskTags :many
SELECT task_id, tag_id FROM task_tags
`

func (q *Queries) GetTaskTags(ctx context.Context) ([]TaskTag, error) {
	rows, err := q.db.QueryContext(ctx, getTaskTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskTag
	for rows.Next() {
		var i TaskTag
		if err := rows.Scan(&i.TaskID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, task_time, task_finish_date, user_id FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TaskTime,
			&i.TaskFinishDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByUserID = `-- name: GetTasksByUserID :many
SELECT id, title, task_time, task_finish_date, user_id FROM tasks WHERE user_id = $1
`

func (q *Queries) GetTasksByUserID(ctx context.Context, userID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TaskTime,
			&i.TaskFinishDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uid, name, email FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const getUserByUID = `-- name: GetUserByUID :one
SELECT id, uid, name, email FROM users WHERE uid = $1
`

func (q *Queries) GetUserByUID(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUID, uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, uid, name, email FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks SET title = $1, task_time = $2, task_finish_date = $3 WHERE id = $4 RETURNING id, title, task_time, task_finish_date, user_id
`

type UpdateTaskParams struct {
	Title          string
	TaskTime       time.Time
	TaskFinishDate time.Time
	ID             int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.TaskTime,
		arg.TaskFinishDate,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TaskTime,
		&i.TaskFinishDate,
		&i.UserID,
	)
	return i, err
}
